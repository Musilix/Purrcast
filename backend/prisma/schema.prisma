generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  schemas    = ["public", "geo", "predictions"]
  extensions = [postgis, plpgsql]
}

model Post {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  contentId      String    @db.VarChar(255)
  published      Boolean   @default(false)
  isDeleted      Boolean   @default(false)
  isCatOnHead    Boolean?
  timeZoneOffset Int?      @default(0)
  
  id_state       us_states @relation(fields: [postState], references: [id])
  postState      Int
  id_city  us_cities @relation(fields: [postCity], references: [id])
  postCity Int

  author   User?      @relation(fields: [authorId], references: [id])
  authorId Int?
  
  upvotes  Upvotes[]

  @@schema("public")
}

model User {
  id            Int       @id @default(autoincrement())
  uuid          String?   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  bio           String?
  username      String    @unique
  isDeactivated Boolean   @default(false)
  
  posts         Post[]
  upvotes       Upvotes[]

  @@schema("public")
}

model Upvotes {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  location  String   @default("Earth") @db.VarChar(255)
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@id(name: "voteId", [postId, userId])
  @@schema("public")
}

model us_states {
  id                Int                 @id @default(autoincrement())
  state_code        String
  state_name        String
  us_cities         us_cities[]
  predictions       Predictions[]
  weeklyPredictions WeeklyPredictions[]

  posts Post[]

  @@schema("geo")
}

model us_cities {
  id                Int                 @id @default(autoincrement())
  city              String
  county            String
  latitude          Float
  longitude         Float
  us_state          us_states           @relation(fields: [id_state], references: [id])
  id_state          Int
  predictions       Predictions[]
  weeklyPredictions WeeklyPredictions[]
  posts             Post[]

  @@schema("geo")
}

model Predictions {
  prediction Int
  date       DateTime @db.Date

  id_state us_states @relation(fields: [us_state], references: [id])
  us_state Int

  id_city us_cities @relation(fields: [us_city], references: [id])
  us_city Int

  @@id(name: "id", [us_state, us_city, date])
  @@schema("predictions")
}

// TODO - the way we're going about generating rolling predictions could theoretically lead to a lot of 
// storage being used to hold prediction date. 52 (weeks) * ~109,000 (cities) = 5,668,000 rows per year of stale data...
// Because of this, we should maybe generate predictions for us_city and us_state combinations, overwriting both the weekPivot and prediction during each iteration of our weekly prediction function
// thereby having a maximum of 52 rows per city per year. This would be a much more manageable, but we would lose prediction data over the years...
model WeeklyPredictions {
  prediction Int
  weekPivot  DateTime @db.Date

  id_state us_states @relation(fields: [us_state], references: [id])
  us_state Int

  id_city us_cities @relation(fields: [us_city], references: [id])
  us_city Int

  @@id(name: "id", [us_state, us_city])
  @@schema("predictions")
}
